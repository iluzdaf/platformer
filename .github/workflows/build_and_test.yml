name: Build and Test

on:
  push:
  pull_request:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    env:
      DISPLAY: ":99"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Set up for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget lsb-release gnupg
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20
          sudo apt-get install -y \
            clang \
            libc++-20-dev \
            libc++abi-20-dev \
            libgl1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev
          Xvfb :99 -screen 0 1024x768x24 &

      - name: Set up for macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm

      - name: Set up for Windows
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Configure & Build for Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -G "Ninja" -B build/release -DCMAKE_CONFIGURATION_TYPES=Release -DSKIP_OPENGL_TESTS=ON
          cmake --build build/release --config Release

      - name: Configure & Build for macOS and Linux
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cmake -G Ninja -B build/release \
              -DCMAKE_BUILD_TYPE=Release \
              -DGLFW_BUILD_WAYLAND=OFF \
              -DCMAKE_C_COMPILER=/usr/bin/clang-20 \
              -DCMAKE_CXX_COMPILER=/usr/bin/clang++-20 \
              -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
              -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++ -lc++abi"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            cmake -G Ninja -B build/release \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="/opt/homebrew/opt/llvm/bin/clang" \
              -DCMAKE_CXX_COMPILER="/opt/homebrew/opt/llvm/bin/clang++" \
              -DCMAKE_OSX_SYSROOT=$(xcrun --sdk macosx --show-sdk-path) \
              -DSKIP_OPENGL_TESTS=ON
          fi

          cmake --build build/release --config Release

      - name: Run tests for Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: build\release\tests.exe

      - name: Run tests for macOS and Linux
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd build/release
          ./tests
